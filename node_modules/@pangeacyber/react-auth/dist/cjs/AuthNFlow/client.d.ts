import AuthNClient from "@src/AuthNClient";
import { APIResponse, AuthConfig, ClientResponse } from "@src/types";
import { AuthNFlowOptions, FlowState, FlowStart, FlowSignupPassword, FlowVerifyPassword, FlowVerifyCallback, FlowVerifyCaptcha, FlowMfaStart, FlowMfaComplete, FlowResetPassword } from "./types";
export declare class AuthNFlowClient extends AuthNClient {
    state: FlowState;
    options: AuthNFlowOptions;
    constructor(config: AuthConfig, options?: AuthNFlowOptions);
    initState(flowState: FlowState): void;
    start(data: FlowStart): Promise<ClientResponse>;
    signupPassword(data: FlowSignupPassword): Promise<ClientResponse>;
    signupSocial(data: FlowVerifyCallback): Promise<ClientResponse>;
    verifySocial(data: FlowVerifyCallback): Promise<ClientResponse>;
    verifyPassword(data: FlowVerifyPassword): Promise<ClientResponse>;
    verifyCaptcha(data: FlowVerifyCaptcha): Promise<ClientResponse>;
    verifyEmail(data: FlowVerifyCallback): Promise<ClientResponse>;
    enrollMfaStart(data: FlowMfaStart): Promise<ClientResponse>;
    enrollMfaComplete(data: FlowMfaComplete): Promise<ClientResponse>;
    verifyMfaStart(data: FlowMfaStart): Promise<ClientResponse>;
    verifyMfaComplete(data: FlowMfaComplete): Promise<ClientResponse>;
    resetPassword(data: FlowResetPassword): Promise<ClientResponse>;
    complete(): Promise<ClientResponse>;
    reset(): void;
    post(endpoint: string, payload: any, updateState?: boolean): Promise<ClientResponse>;
    processResponse(response: APIResponse, updateState?: boolean): boolean;
}
export default AuthNFlowClient;
