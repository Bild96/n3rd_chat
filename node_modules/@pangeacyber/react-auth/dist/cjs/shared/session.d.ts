import { APIResponse, AuthUser, SessionData } from "@src/types";
import { AuthOptions, CookieOptions } from "@src/shared/types";
type CookieObj = {
    [key: string]: string;
};
export declare const REFRESH_CHECK_INTERVAL = 15;
export declare const REFRESH_CHECK_THRESHOLD = 10;
export declare const SESSION_DATA_KEY = "pangea-session";
export declare const TOKEN_COOKIE_NAME = "pangea-token";
export declare const REFRESH_COOKIE_NAME = "pangea-refresh";
export declare const DEFAULT_COOKIE_OPTIONS: CookieOptions;
export declare const hasAuthParams: (searchParams?: string) => boolean;
export declare function getStorageAPI(isUsingCookies: boolean): Storage;
export declare const saveSessionData: (data: SessionData, options: AuthOptions) => void;
export declare const getSessionData: (options: AuthOptions) => SessionData;
export declare const getSessionToken: (options: AuthOptions) => string | undefined;
export declare const getRefreshToken: (options: AuthOptions) => string | undefined;
export declare const getAllTokens: (options: AuthOptions) => {
    sessionToken: string;
    refreshToken: string;
};
export declare const getSessionTokenValues: (options: AuthOptions) => string[];
export declare const getTokenCookieFields: (name: string) => string[];
export declare const getTokenFromCookie: (name: string) => string;
export declare const getTokenExpire: (options: AuthOptions) => string;
export declare const isTokenExpiring: (expireTime: string) => boolean;
export declare const maybeAddSecureFlag: (cookie: string, options: AuthOptions) => string;
export declare const getCookies: () => CookieObj;
export declare const setCookie: (key: string, value: string | undefined, options: AuthOptions) => void;
export declare const removeCookie: (key: string, options: AuthOptions) => void;
export declare const setTokenCookies: (userData: AuthUser, options: AuthOptions) => void;
export declare const removeTokenCookies: (options: AuthOptions) => void;
export declare const getUserFromResponse: (data: APIResponse) => AuthUser;
export {};
