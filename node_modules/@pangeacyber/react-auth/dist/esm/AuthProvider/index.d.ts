import { FC } from "react";
import AuthNClient from "@src/AuthNClient";
import { getTokenFromCookie } from "@src/shared/session";
import { AuthConfig, AuthUser, AppState } from "@src/types";
import { CookieOptions } from "../shared/types";
export interface AuthProviderProps {
    /**
     * loginUrl: string
     *
     * The url for the authn hosted UI
     */
    loginUrl: string;
    /**
     * The client config for the authn API
     *
     * See AuthConfig in types.ts for full
     * config options.
     */
    config: AuthConfig;
    /**
     * onLogin: (appState: AppState) => void
     *
     * Optional callback, called when successfully
     * logging in
     */
    onLogin?: (appState: AppState) => void;
    /**
     * cookieOptions: optional options used when setting a cookie for auth
     */
    cookieOptions?: CookieOptions;
    /**
     * redirectPathname: optional string
     *
     * When passed in, <AuthProvider /> will append this pathname to the
     * redirect URI when going through the login/logout flow
     *
     * @example
     * redirectPathname="/docs/"
     */
    redirectPathname?: string;
    /**
     * redirectOnLogout: optional boolean
     *
     * When set to true users will be redirected to the hosted logout page on logout.
     *
     * Default is false
     */
    redirectOnLogout?: boolean;
    /**
     * useStrictStateCheck: optional boolean
     *
     * When set to true AuthProvider will only accept state values generated by your application.
     *
     * Not allowing authentication flows starting from outside your application.
     *
     * Default is true
     */
    useStrictStateCheck?: boolean;
    children: JSX.Element;
}
export interface AuthContextType {
    loading: boolean;
    authenticated: boolean;
    error: string;
    user: AuthUser | undefined;
    client: AuthNClient;
    login: () => void;
    logout: () => void;
    getToken: () => string | undefined;
}
export declare const AuthProvider: FC<AuthProviderProps>;
export declare const useAuth: () => AuthContextType;
export { getTokenFromCookie };
